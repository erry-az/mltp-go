// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package query

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type TransactionName string

const (
	TransactionNameTransfer TransactionName = "transfer"
	TransactionNameTopUp    TransactionName = "top_up"
)

func (e *TransactionName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionName(s)
	case string:
		*e = TransactionName(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionName: %T", src)
	}
	return nil
}

type NullTransactionName struct {
	TransactionName TransactionName
	Valid           bool // Valid is true if TransactionName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionName) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionName), nil
}

type TransactionType string

const (
	TransactionTypeCredit TransactionType = "credit"
	TransactionTypeDebit  TransactionType = "debit"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Transaction struct {
	ID        int32
	UserID    int32
	Amount    int64
	Name      TransactionName
	Type      TransactionType
	CreatedAt time.Time
}

type User struct {
	ID        int32
	Username  string
	Fullname  string
	Balance   int64
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}
