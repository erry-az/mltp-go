version: "3.8"

volumes:
  grafana:
  postgres:

services:
  # Grafana Alloy batches and processes traces sent to it, generating
  # auto-logs from those traces.
  # Includes Metrics, Logs, Traces and Profiles.
  alloy:
    image: grafana/alloy:v1.1.0
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55678:55679"
    volumes:
      - "./docker/grafana/services/alloy/config.alloy:/etc/alloy/config.alloy"
      - "./docker/grafana/services/alloy/endpoints.json:/etc/alloy/endpoints.json"
    command: [
      "run",
      "--server.http.listen-addr=0.0.0.0:12345",
      "--stability.level=public-preview",
      "/etc/alloy/config.alloy",
    ]

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:10.4.3
    volumes:
      - "./docker/grafana/definitions:/var/lib/grafana/dashboards"
      - "./docker/grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch traceQLStreaming correlations metricsSummary traceqlEditor traceToMetrics traceToProfiles datatrails
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
  
  # The Tempo service stores traces send to it by Grafana Alloy, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.4.1
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./docker/grafana/services/tempo/config.yaml:/etc/tempo.yaml"

  # The Loki service stores logs sent to it, and takes queries from Grafana
  # to visualise those logs.
  loki:
    image: grafana/loki:3.0.0
    ports:
      - "3100:3100"

  mimir:
    image: grafana/mimir:2.12.0
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - "./docker/grafana/services/mimir/config.yaml:/etc/mimir.yaml"

#  k6:
#    image: grafana/k6
#    volumes:
#      - "./k6:/scripts"
#    environment:
#      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
#      - K6_DURATION=3600s
#      - K6_VUS=4
#      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
#    restart: always
#    command: ["run", "-o", "experimental-prometheus-rw", "/scripts/mythical-loadtest.js"]

  pyroscope:
    image: grafana/pyroscope:1.5.0
    ports:
      - "4040:4040"
    command: ["server"]

  # A postgres DB used to store data by the API server microservice.
  wallet-database:
    image: postgres:14.5
    restart: always
    environment:
      POSTGRES_PASSWORD: "supersecret"
      POSTGRES_USER: "local"
      POSTGRES_DB: "wallet"
    volumes:
      - "postgres:/var/lib/postgresql/data"
    ports:
      - "5477:5432"

  wallet-rest:
    depends_on:
      - wallet-database
      - alloy
    build:
      dockerfile: Dockerfile
      context: .
      args:
        service_env: "local"
        service_type: "rest"
    environment:
      SERVICE_NAME: "wallet-rest"
    ports:
      - "14848:4848"

  beyla-wallet-rest:
    image: grafana/beyla:1.5.1
    privileged: true
    # Beyla requires to be run in the same process namespace as the process it's watching.
    # In Docker, we can do this by joining the namespace for the watched process with the Beyla
    # container watching it by using a specific `pid` label.
    pid: "service:wallet-rest"
    # Beyla requires the SYS_ADMIN capability to run, to add hooks to the underlying kernel.
    # Note that you should *always* be aware of the security implications of adding capabilities
    # before you do so.
    cap_add:
      - SYS_ADMIN
    # If using the above capability fails to instrument your service, remove it and uncomment the
    # line below. Beware that this will allow Beyla to run with full privileges, which may be
    # undesirable.
    #privileged: true
    command:
      - /beyla
      - --config=/configs/config.yaml
    volumes:
      - ./docker/grafana/services/beyla/:/configs
    # See the full list of configuration options at
    # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
    # options set below.
    environment:
      BEYLA_OPEN_PORT: "4848"                                 # Instrument any service listening on port.
      BEYLA_SERVICE_NAMESPACE: "wallet"                       # The namespace for the service.
      BEYLA_PROMETHEUS_PORT: "9090"                           # The port to expose Prometheus metrics on.
      BEYLA_PRINT_TRACES: true
      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
      OTEL_SERVICE_NAME: "beyla-wallet-rest"                    # The service name to use for OpenTelemetry traces.
      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"                # Whether to use an insecure connection to Grafana Alloy.
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Alloy.
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://alloy:4317/"  # The endpoint to send traces to.
    # The `depends_on` block below ensures that the wallet-rest service is started before Beyla.
    depends_on:
      wallet-rest:
        condition: service_started
