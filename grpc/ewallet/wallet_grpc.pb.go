// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: grpc/wallet.proto

package ewallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EWalletClient is the client API for EWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EWalletClient interface {
	// Get user balance with JWT token
	BalanceRead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceReadResponse, error)
	// Transfer funds with JWT token, target username, and amount
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Get top transacting users by value with JWT token
	ListTopUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopTransactionsResponse, error)
	// Register a new user with username and return JWT token
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error)
	// Topup user balance with JWT token and amount
	TopupBalance(ctx context.Context, in *TopupBalanceRequest, opts ...grpc.CallOption) (*TopupBalanceResponse, error)
	// Get top transactions for the user with JWT token
	GetTopTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopTransactionsResponse, error)
}

type eWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewEWalletClient(cc grpc.ClientConnInterface) EWalletClient {
	return &eWalletClient{cc}
}

func (c *eWalletClient) BalanceRead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceReadResponse, error) {
	out := new(BalanceReadResponse)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/BalanceRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eWalletClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eWalletClient) ListTopUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopTransactionsResponse, error) {
	out := new(TopTransactionsResponse)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/ListTopUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eWalletClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eWalletClient) TopupBalance(ctx context.Context, in *TopupBalanceRequest, opts ...grpc.CallOption) (*TopupBalanceResponse, error) {
	out := new(TopupBalanceResponse)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/TopupBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eWalletClient) GetTopTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopTransactionsResponse, error) {
	out := new(TopTransactionsResponse)
	err := c.cc.Invoke(ctx, "/ewallet.EWallet/GetTopTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EWalletServer is the server API for EWallet service.
// All implementations must embed UnimplementedEWalletServer
// for forward compatibility
type EWalletServer interface {
	// Get user balance with JWT token
	BalanceRead(context.Context, *emptypb.Empty) (*BalanceReadResponse, error)
	// Transfer funds with JWT token, target username, and amount
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Get top transacting users by value with JWT token
	ListTopUsers(context.Context, *emptypb.Empty) (*TopTransactionsResponse, error)
	// Register a new user with username and return JWT token
	Register(context.Context, *User) (*Token, error)
	// Topup user balance with JWT token and amount
	TopupBalance(context.Context, *TopupBalanceRequest) (*TopupBalanceResponse, error)
	// Get top transactions for the user with JWT token
	GetTopTransactions(context.Context, *emptypb.Empty) (*TopTransactionsResponse, error)
	mustEmbedUnimplementedEWalletServer()
}

// UnimplementedEWalletServer must be embedded to have forward compatible implementations.
type UnimplementedEWalletServer struct {
}

func (UnimplementedEWalletServer) BalanceRead(context.Context, *emptypb.Empty) (*BalanceReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceRead not implemented")
}
func (UnimplementedEWalletServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedEWalletServer) ListTopUsers(context.Context, *emptypb.Empty) (*TopTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopUsers not implemented")
}
func (UnimplementedEWalletServer) Register(context.Context, *User) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedEWalletServer) TopupBalance(context.Context, *TopupBalanceRequest) (*TopupBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopupBalance not implemented")
}
func (UnimplementedEWalletServer) GetTopTransactions(context.Context, *emptypb.Empty) (*TopTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTransactions not implemented")
}
func (UnimplementedEWalletServer) mustEmbedUnimplementedEWalletServer() {}

// UnsafeEWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EWalletServer will
// result in compilation errors.
type UnsafeEWalletServer interface {
	mustEmbedUnimplementedEWalletServer()
}

func RegisterEWalletServer(s grpc.ServiceRegistrar, srv EWalletServer) {
	s.RegisterService(&EWallet_ServiceDesc, srv)
}

func _EWallet_BalanceRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).BalanceRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/BalanceRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).BalanceRead(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EWallet_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EWallet_ListTopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).ListTopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/ListTopUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).ListTopUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EWallet_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _EWallet_TopupBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopupBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).TopupBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/TopupBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).TopupBalance(ctx, req.(*TopupBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EWallet_GetTopTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EWalletServer).GetTopTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ewallet.EWallet/GetTopTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EWalletServer).GetTopTransactions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EWallet_ServiceDesc is the grpc.ServiceDesc for EWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ewallet.EWallet",
	HandlerType: (*EWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalanceRead",
			Handler:    _EWallet_BalanceRead_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _EWallet_Transfer_Handler,
		},
		{
			MethodName: "ListTopUsers",
			Handler:    _EWallet_ListTopUsers_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _EWallet_Register_Handler,
		},
		{
			MethodName: "TopupBalance",
			Handler:    _EWallet_TopupBalance_Handler,
		},
		{
			MethodName: "GetTopTransactions",
			Handler:    _EWallet_GetTopTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/wallet.proto",
}
